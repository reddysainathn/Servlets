	Hibernate FrameWork::::
	-->called as Persistance framework.
	-->ORM(Object Relational Mapping) FrameWork.
	-->It Provides Object Oriented view of the DB server

Persistance Framework means basically which deals with permanent storage

ORM means 

Purpose of the framework is used with JAVA applications to interact with DB server.

Hibernate used to interact with the DB server by JAVA

API provides the class library

We can over come all limitations JDBC API in Hibernate
	--(Less redundant Code)No need to write Connection code,loading the drivers,constructing the query.
	--Hibernate got transformation.(Objects to Records and Records to Objects)
	--It is Database independent
(No need to write the queries,so it is databse independent,it will generate the queries on which DB server it interacts )
	--Support for handling inheritance.It provides inheritance statergies.
	--It has very good support to handle associations
	--it has caching support

Framework means it basically provides the infrastructure for application developmetn and so many re-usable components.they are provided by 3rd party people(Open Source Community people)Framework provide Templete for developing application 


HQL (Hibernate Query Language)It is database independent query language,it will transform into native SQL queries.

Hibernate provides a product called session to interact with DB


Hibernate Configuration file
	hibernate.cfg.xml


Session is predifined Component ,it is responsible for interact with DB

in order to obtain a session,we need SessionFactory object,it is a factroy object used for creating Session.
This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object. In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface.

the factory method pattern is a creational pattern which uses factory methods to deal with the problem of creating objects without specifying the exact class of object that will be created. This is done by creating objects via calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.

